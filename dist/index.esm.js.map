{"version":3,"file":"index.esm.js","sources":["../src/JwtAuthClient.ts","../src/react/AuthContext.tsx"],"sourcesContent":["import { JwtAuthClientOptions, LoginCredentials, JwtPayload, TokenResponse } from './types';\n\n/**\n * @class JwtAuthClient\n * @description A client for handling JWT authentication.\n */\nexport class JwtAuthClient {\n    private storage: Storage;\n    private accessTokenKey: string;\n    private refreshTokenKey: string;\n    private rolesClaim: string;\n    private permissionsClaim: string;\n    private onRefresh: JwtAuthClientOptions['onRefresh'];\n    private onLogin: JwtAuthClientOptions['onLogin'];\n    private onVerify: JwtAuthClientOptions['onVerify'];\n\n    /**\n     * @constructor\n     * @param {JwtAuthClientOptions} [options] - The options for the client.\n     */\n    constructor(options: JwtAuthClientOptions = {}) {\n        this.storage = options.storage || window.localStorage;\n        this.accessTokenKey = options.accessTokenKey || 'jwt_access_token';\n        this.refreshTokenKey = options.refreshTokenKey || 'jwt_refresh_token';\n        this.rolesClaim = options.rolesClaim || 'roles';\n        this.permissionsClaim = options.permissionsClaim || 'permissions';\n        this.onRefresh = options.onRefresh;\n        this.onLogin = options.onLogin;\n        this.onVerify = options.onVerify;\n    }\n\n    /**\n     * Saves the tokens to the configured storage.\n     * @param {string} accessToken - The access JWT string.\n     * @param {string} [refreshToken] - The optional refresh JWT string.\n     */\n    setTokens(accessToken: string, refreshToken?: string) {\n        if (typeof accessToken !== 'string' || accessToken.split('.').length !== 3) {\n            console.error('Invalid Access Token provided to setTokens method.');\n            return;\n        }\n        this.storage.setItem(this.accessTokenKey, accessToken);\n        if (refreshToken) {\n            this.storage.setItem(this.refreshTokenKey, refreshToken);\n        }\n    }\n\n    /**\n     * Handles the login process by calling the provided onLogin function or a default fetch.\n     * @param {object} credentials - User credentials (e.g., { username, password }).\n     * @param {string} loginUrl - The URL for the login API endpoint.\n     * @returns {Promise<boolean>} True if login was successful, false otherwise.\n     */\n    async login(credentials: LoginCredentials, loginUrl?: string): Promise<boolean> {\n        if (!this.onLogin && !loginUrl) {\n            console.error('Neither onLogin function nor loginUrl provided. Cannot perform login.');\n            return false;\n        }\n\n        try {\n            let responseData;\n            if (this.onLogin) {\n                responseData = await this.onLogin(credentials);\n            } else {\n                if (!loginUrl) {\n                    throw new Error('loginUrl must be provided if onLogin function is not configured.');\n                }\n                const response = await fetch(loginUrl, {\n                    method: 'POST',\n                    headers: {\n                        'Content-Type': 'application/json',\n                    },\n                    body: JSON.stringify(credentials),\n                });\n\n                if (!response.ok) {\n                    throw new Error(`Login failed with status: ${response.status}`);\n                }\n                responseData = await response.json();\n            }\n\n            const { accessToken, refreshToken } = responseData;\n            if (!accessToken) {\n                throw new Error('Login response did not contain an access token.');\n            }\n\n            this.setTokens(accessToken, refreshToken);\n            return true;\n        } catch (error) {\n            console.error('Login failed:', error);\n            this.logout(); // Clear any existing tokens on login failure\n            return false;\n        }\n    }\n\n    /**\n     * Verifies the access token with the backend using the provided onVerify function.\n     * @returns {Promise<boolean>} True if token is valid, false otherwise.\n     */\n    async verifyToken(): Promise<boolean> {\n        if (!this.onVerify || typeof this.onVerify !== 'function') {\n            console.warn('onVerify function not configured. Cannot verify token with backend.');\n            return true; // Assume valid if no verification function is provided\n        }\n\n        const accessToken = this.getAccessToken();\n        if (!accessToken) {\n            return false;\n        }\n\n        try {\n            const isValid = await this.onVerify(accessToken);\n            if (!isValid) {\n                console.warn('Backend verification failed for access token.');\n                this.logout(); // Invalidate local session if backend says token is invalid\n            }\n            return isValid;\n        } catch (error) {\n            console.error('Error during token verification:', error);\n            this.logout(); // Logout on verification error\n            return false;\n        }\n    }\n\n    /**\n     * Retrieves roles from the decoded access token payload.\n     * @returns {string[]} An array of roles or an empty array if not found.\n     */\n    getRoles() {\n        const payload = this.getPayload();\n        if (payload && Array.isArray(payload[this.rolesClaim])) {\n            return payload[this.rolesClaim];\n        }\n        return [];\n    }\n\n    /**\n     * Checks if the user has a specific role.\n     * @param {string} role - The role to check for.\n     * @returns {boolean} True if the user has the role, false otherwise.\n     */\n    hasRole(role: string) {\n        return this.getRoles().includes(role);\n    }\n\n    /**\n     * Checks if the user has any of the specified roles.\n     * @param {string[]} roles - An array of roles to check for.\n     * @returns {boolean} True if the user has at least one of the roles, false otherwise.\n     */\n    hasAnyRole(roles: string[]) {\n        const userRoles = this.getRoles();\n        return roles.some(role => userRoles.includes(role));\n    }\n\n    /**\n     * Checks if the user has all of the specified roles.\n     * @param {string[]} roles - An array of roles to check for.\n     * @returns {boolean} True if the user has all of the roles, false otherwise.\n     */\n    hasAllRoles(roles: string[]) {\n        const userRoles = this.getRoles();\n        return roles.every(role => userRoles.includes(role));\n    }\n\n    /**\n     * Retrieves permissions from the decoded access token payload.\n     * @returns {string[]} An array of permissions or an empty array if not found.\n     */\n    getPermissions(): string[] {\n        const payload = this.getPayload();\n        if (payload && Array.isArray(payload[this.permissionsClaim])) {\n            return payload[this.permissionsClaim] as string[];\n        }\n        return [];\n    }\n\n    /**\n     * Checks if the user has a specific permission.\n     * @param {string} permission - The permission to check for.\n     * @returns {boolean} True if the user has the permission, false otherwise.\n     */\n    hasPermission(permission: string): boolean {\n        return this.getPermissions().includes(permission);\n    }\n\n    /**\n     * Checks if the user has any of the specified permissions.\n     * @param {string[]} permissions - An array of permissions to check for.\n     * @returns {boolean} True if the user has at least one of the permissions, false otherwise.\n     */\n    hasAnyPermission(permissions: string[]): boolean {\n        const userPermissions = this.getPermissions();\n        return permissions.some((permission: string) => userPermissions.includes(permission));\n    }\n\n    /**\n     * Checks if the user has all of the specified permissions.\n     * @param {string[]} permissions - An array of permissions to check for.\n     * @returns {boolean} True if the user has all of the permissions, false otherwise.\n     */\n    hasAllPermissions(permissions: string[]): boolean {\n        const userPermissions = this.getPermissions();\n        return permissions.every((permission: string) => userPermissions.includes(permission));\n    }\n\n    /**\n     * Removes tokens from storage.\n     */\n    logout() {\n        this.storage.removeItem(this.accessTokenKey);\n        this.storage.removeItem(this.refreshTokenKey);\n    }\n\n    /**\n     * Retrieves the raw access token from storage.\n     * @returns {string|null} The access token string or null if not found.\n     */\n    getAccessToken() {\n        return this.storage.getItem(this.accessTokenKey);\n    }\n\n    /**\n     * Retrieves the raw refresh token from storage.\n     * @returns {string|null} The refresh token string or null if not found.\n     */\n    getRefreshToken() {\n        return this.storage.getItem(this.refreshTokenKey);\n    }\n\n    /**\n     * Decodes the access token payload.\n     * @returns {object|null} The decoded payload object or null if token is invalid/missing.\n     */\n    getPayload() {\n        const token = this.getAccessToken();\n        if (!token) return null;\n\n        try {\n            const payloadBase64 = token.split('.')[1];\n            const decodedJson = atob(payloadBase64.replace(/-/g, '+').replace(/_/g, '/'));\n            return JSON.parse(decodedJson);\n        } catch (error) {\n            console.error('Failed to decode JWT payload:', error);\n            return null;\n        }\n    }\n\n    /**\n     * Checks if the access token is expired.\n     * @returns {boolean} True if the token is expired or doesn't exist.\n     */\n    isAccessTokenExpired() {\n        const payload = this.getPayload();\n        if (!payload || typeof payload.exp !== 'number') {\n            return true;\n        }\n        const nowInSeconds = Math.floor(Date.now() / 1000);\n        return nowInSeconds > payload.exp;\n    }\n\n    /**\n     * Checks if a valid, non-expired access token exists.\n     * @returns {boolean} True if authenticated, false otherwise.\n     */\n    isAuthenticated(): boolean {\n        return !this.isAccessTokenExpired();\n    }\n\n    /**\n     * Attempts to refresh the access token using the stored refresh token.\n     * @returns {Promise<boolean>} True if refresh was successful, false otherwise.\n     */\n    async refreshAccessToken(): Promise<boolean> {\n        if (!this.onRefresh || typeof this.onRefresh !== 'function') {\n            console.error('onRefresh function not configured. Cannot refresh token.');\n            return false;\n        }\n\n        const refreshToken = this.getRefreshToken();\n        if (!refreshToken) {\n            console.log('No refresh token available.');\n            return false;\n        }\n\n        try {\n            const { newAccessToken, newRefreshToken } = await this.onRefresh(refreshToken);\n            if (!newAccessToken) {\n                throw new Error(\"Refresh call did not return a new access token.\");\n            }\n            this.setTokens(newAccessToken, newRefreshToken); // Store new tokens\n            return true;\n        } catch (error: any) {\n            console.error('Failed to refresh token:', error);\n            // If refresh fails (e.g., refresh token is also expired), log the user out.\n            this.logout();\n            return false;\n        }\n    }\n}","import React, { createContext, useState, useEffect, useMemo, useCallback, useContext } from 'react';\nimport { JwtAuthClient } from '../JwtAuthClient';\nimport { AuthContextType, JwtAuthClientOptions, LoginCredentials, JwtPayload } from '../types';\n\nconst AuthContext = createContext<AuthContextType | null>(null);\n\nexport function AuthProvider({ children, config }: { children: React.ReactNode; config: JwtAuthClientOptions }) {\n    const authClient = useMemo(() => new JwtAuthClient(config), [config]);\n\n    const [accessToken, setAccessToken] = useState(authClient.getAccessToken());\n    const [loading, setLoading] = useState(true);\n    const [isRefreshing, setIsRefreshing] = useState(false);\n    const [isVerified, setIsVerified] = useState(false);\n\n    // Initial check on component mount\n    useEffect(() => {\n        const initializeAuth = async () => {\n            let verified = false;\n            if (authClient.isAccessTokenExpired()) {\n                const refreshToken = authClient.getRefreshToken();\n                if (refreshToken) {\n                    setIsRefreshing(true);\n                    const success = await authClient.refreshAccessToken();\n                    if (success) {\n                        setAccessToken(authClient.getAccessToken());\n                        verified = await authClient.verifyToken();\n                    }\n                }\n            } else {\n                verified = await authClient.verifyToken();\n            }\n            setIsVerified(verified);\n            setLoading(false);\n            setIsRefreshing(false);\n        };\n        initializeAuth();\n    }, [authClient]);\n\n    const isAuthenticated = useMemo(() => !!accessToken && !authClient.isAccessTokenExpired() && isVerified, [accessToken, authClient, isVerified]);\n    const userPayload = useMemo(() => isAuthenticated ? authClient.getPayload() : null, [isAuthenticated, authClient]);\n\n    const login = useCallback(async (credentials: LoginCredentials, loginUrl?: string) => {\n        setLoading(true);\n        const success = await authClient.login(credentials, loginUrl);\n        if (success) {\n            setAccessToken(authClient.getAccessToken());\n            const verified = await authClient.verifyToken();\n            setIsVerified(verified);\n        } else {\n            setAccessToken(null);\n            setIsVerified(false);\n        }\n        setLoading(false);\n        return success;\n    }, [authClient]);\n\n    const logout = useCallback(() => {\n        authClient.logout();\n        setAccessToken(null);\n    }, [authClient]);\n\n    const refreshAccessToken = useCallback(async () => {\n        setIsRefreshing(true);\n        const success = await authClient.refreshAccessToken();\n        if (success) {\n            setAccessToken(authClient.getAccessToken());\n        }\n        setIsRefreshing(false);\n        return success;\n    }, [authClient]);\n\n    const verifyToken = useCallback(async () => {\n        setLoading(true);\n        const verified = await authClient.verifyToken();\n        setIsVerified(verified);\n        setLoading(false);\n        return verified;\n    }, [authClient]);\n\n    const value = useMemo(() => ({\n        isAuthenticated,\n        userPayload,\n        accessToken,\n        login,\n        logout,\n        loading,\n        isRefreshing,\n        refreshAccessToken,\n        verifyToken,\n        getRoles: () => authClient.getRoles(),\n        hasRole: (role) => authClient.hasRole(role),\n        hasAnyRole: (roles) => authClient.hasAnyRole(roles),\n        hasAllRoles: (roles) => authClient.hasAllRoles(roles),\n        getPermissions: () => authClient.getPermissions(),\n        hasPermission: (permission: string) => authClient.hasPermission(permission),\n        hasAnyPermission: (permissions: string[]) => authClient.hasAnyPermission(permissions),\n        hasAllPermissions: (permissions: string[]) => authClient.hasAllPermissions(permissions),\n    }), [isAuthenticated, userPayload, accessToken, login, logout, loading, isRefreshing, refreshAccessToken, verifyToken, authClient]);\n\n    return (\n        <AuthContext.Provider value={value}>\n            {children}\n        </AuthContext.Provider>\n    );\n}\n\nexport function useAuth(): AuthContextType {\n    const context = useContext(AuthContext);\n    if (context === null) {\n        throw new Error('useAuth must be used within an AuthProvider');\n    }\n    return context;\n}"],"names":["JwtAuthClient","options","_classCallCheck","storage","window","localStorage","accessTokenKey","refreshTokenKey","rolesClaim","permissionsClaim","onRefresh","onLogin","onVerify","_createClass","key","value","setTokens","accessToken","refreshToken","split","length","console","error","setItem","_login","_asyncToGenerator","_regenerator","m","_callee","credentials","loginUrl","responseData","response","_responseData","_t","w","_context","n","a","p","v","Error","fetch","method","headers","body","JSON","stringify","ok","concat","status","json","logout","login","_x","_x2","apply","arguments","_verifyToken","_callee2","isValid","_t2","_context2","warn","getAccessToken","verifyToken","getRoles","payload","getPayload","Array","isArray","hasRole","role","includes","hasAnyRole","roles","userRoles","some","hasAllRoles","every","getPermissions","hasPermission","permission","hasAnyPermission","permissions","userPermissions","hasAllPermissions","removeItem","getItem","getRefreshToken","token","payloadBase64","decodedJson","atob","replace","parse","isAccessTokenExpired","exp","nowInSeconds","Math","floor","Date","now","isAuthenticated","_refreshAccessToken","_callee3","_yield$this$onRefresh","newAccessToken","newRefreshToken","_t3","_context3","log","refreshAccessToken","AuthContext","createContext","AuthProvider","_ref","children","config","authClient","useMemo","_useState","useState","_useState2","_slicedToArray","setAccessToken","_useState3","_useState4","loading","setLoading","_useState5","_useState6","isRefreshing","setIsRefreshing","_useState7","_useState8","isVerified","setIsVerified","useEffect","initializeAuth","_ref2","verified","success","userPayload","useCallback","_ref3","_callee4","_context4","React","createElement","Provider","useAuth","context","useContext"],"mappings":"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"}