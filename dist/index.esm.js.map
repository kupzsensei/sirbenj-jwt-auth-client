{"version":3,"file":"index.esm.js","sources":["../src/JwtAuthClient.js","../src/react/AuthContext.js"],"sourcesContent":["export class JwtAuthClient {\n    constructor(options = {}) {\n        this.storage = options.storage || window.localStorage;\n        this.accessTokenKey = options.accessTokenKey || 'jwt_access_token';\n        this.refreshTokenKey = options.refreshTokenKey || 'jwt_refresh_token';\n        this.onRefresh = options.onRefresh || null; // User-provided function to call refresh API\n    }\n\n    /**\n     * Saves the tokens to the configured storage.\n     * @param {string} accessToken - The access JWT string.\n     * @param {string} [refreshToken] - The optional refresh JWT string.\n     */\n    login(accessToken, refreshToken) {\n        if (typeof accessToken !== 'string' || accessToken.split('.').length !== 3) {\n            console.error('Invalid Access Token provided to login method.');\n            return;\n        }\n        this.storage.setItem(this.accessTokenKey, accessToken);\n        if (refreshToken) {\n            this.storage.setItem(this.refreshTokenKey, refreshToken);\n        }\n    }\n\n    /**\n     * Removes tokens from storage.\n     */\n    logout() {\n        this.storage.removeItem(this.accessTokenKey);\n        this.storage.removeItem(this.refreshTokenKey);\n    }\n\n    /**\n     * Retrieves the raw access token from storage.\n     * @returns {string|null} The access token string or null if not found.\n     */\n    getAccessToken() {\n        return this.storage.getItem(this.accessTokenKey);\n    }\n\n    /**\n     * Retrieves the raw refresh token from storage.\n     * @returns {string|null} The refresh token string or null if not found.\n     */\n    getRefreshToken() {\n        return this.storage.getItem(this.refreshTokenKey);\n    }\n\n    /**\n     * Decodes the access token payload.\n     * @returns {object|null} The decoded payload object or null if token is invalid/missing.\n     */\n    getPayload() {\n        const token = this.getAccessToken();\n        if (!token) return null;\n\n        try {\n            const payloadBase64 = token.split('.')[1];\n            const decodedJson = atob(payloadBase64.replace(/-/g, '+').replace(/_/g, '/'));\n            return JSON.parse(decodedJson);\n        } catch (error) {\n            console.error('Failed to decode JWT payload:', error);\n            return null;\n        }\n    }\n\n    /**\n     * Checks if the access token is expired.\n     * @returns {boolean} True if the token is expired or doesn't exist.\n     */\n    isAccessTokenExpired() {\n        const payload = this.getPayload();\n        if (!payload || typeof payload.exp !== 'number') {\n            return true;\n        }\n        const nowInSeconds = Math.floor(Date.now() / 1000);\n        return nowInSeconds > payload.exp;\n    }\n\n    /**\n     * Checks if a valid, non-expired access token exists.\n     * @returns {boolean} True if authenticated, false otherwise.\n     */\n    isAuthenticated() {\n        return !this.isAccessTokenExpired();\n    }\n\n    /**\n     * Attempts to refresh the access token using the stored refresh token.\n     * @returns {Promise<boolean>} True if refresh was successful, false otherwise.\n     */\n    async refreshAccessToken() {\n        if (!this.onRefresh || typeof this.onRefresh !== 'function') {\n            console.error('onRefresh function not configured. Cannot refresh token.');\n            return false;\n        }\n\n        const refreshToken = this.getRefreshToken();\n        if (!refreshToken) {\n            console.log('No refresh token available.');\n            return false;\n        }\n\n        try {\n            const { newAccessToken, newRefreshToken } = await this.onRefresh(refreshToken);\n            if (!newAccessToken) {\n                throw new Error(\"Refresh call did not return a new access token.\");\n            }\n            this.login(newAccessToken, newRefreshToken); // Store new tokens\n            return true;\n        } catch (error) {\n            console.error('Failed to refresh token:', error);\n            // If refresh fails (e.g., refresh token is also expired), log the user out.\n            this.logout();\n            return false;\n        }\n    }\n}","import { createContext, useState, useEffect, useMemo, useCallback, useContext } from 'react';\nimport { JwtAuthClient } from '../JwtAuthClient';\n\nconst AuthContext = createContext(null);\n\nexport function AuthProvider({ children, config }) {\n    const authClient = useMemo(() => new JwtAuthClient(config), [config]);\n\n    const [accessToken, setAccessToken] = useState(authClient.getAccessToken());\n    const [loading, setLoading] = useState(true);\n    const [isRefreshing, setIsRefreshing] = useState(false);\n\n    // Initial check on component mount\n    useEffect(() => {\n        const initializeAuth = async () => {\n            if (authClient.isAccessTokenExpired()) {\n                const refreshToken = authClient.getRefreshToken();\n                if (refreshToken) {\n                    setIsRefreshing(true);\n                    const success = await authClient.refreshAccessToken();\n                    if (success) {\n                        setAccessToken(authClient.getAccessToken());\n                    }\n                }\n            }\n            setLoading(false);\n            setIsRefreshing(false);\n        };\n        initializeAuth();\n    }, [authClient]);\n\n    const isAuthenticated = useMemo(() => !!accessToken && !authClient.isAccessTokenExpired(), [accessToken, authClient]);\n    const userPayload = useMemo(() => isAuthenticated ? authClient.getPayload() : null, [isAuthenticated, authClient]);\n\n    const login = useCallback((newAccessToken, newRefreshToken) => {\n        authClient.login(newAccessToken, newRefreshToken);\n        setAccessToken(newAccessToken);\n    }, [authClient]);\n\n    const logout = useCallback(() => {\n        authClient.logout();\n        setAccessToken(null);\n    }, [authClient]);\n\n    const refreshAccessToken = useCallback(async () => {\n        setIsRefreshing(true);\n        const success = await authClient.refreshAccessToken();\n        if (success) {\n            setAccessToken(authClient.getAccessToken());\n        }\n        setIsRefreshing(false);\n        return success;\n    }, [authClient]);\n\n    const value = useMemo(() => ({\n        isAuthenticated,\n        userPayload,\n        accessToken,\n        login,\n        logout,\n        loading,\n        isRefreshing,\n        refreshAccessToken,\n    }), [isAuthenticated, userPayload, accessToken, login, logout, loading, isRefreshing, refreshAccessToken]);\n\n    return (\n        <AuthContext.Provider value={value}>\n            {children}\n        </AuthContext.Provider>\n    );\n}\n\nexport function useAuth() {\n    const context = useContext(AuthContext);\n    if (context === null) {\n        throw new Error('useAuth must be used within an AuthProvider');\n    }\n    return context;\n}"],"names":["JwtAuthClient","options","arguments","length","undefined","_classCallCheck","storage","window","localStorage","accessTokenKey","refreshTokenKey","onRefresh","_createClass","key","value","login","accessToken","refreshToken","split","console","error","setItem","logout","removeItem","getAccessToken","getItem","getRefreshToken","getPayload","token","payloadBase64","decodedJson","atob","replace","JSON","parse","isAccessTokenExpired","payload","exp","nowInSeconds","Math","floor","Date","now","isAuthenticated","_refreshAccessToken","_asyncToGenerator","_regenerator","m","_callee","_yield$this$onRefresh","newAccessToken","newRefreshToken","_t","w","_context","n","a","log","p","v","Error","refreshAccessToken","apply","AuthContext","createContext","AuthProvider","_ref","children","config","authClient","useMemo","_useState","useState","_useState2","_slicedToArray","setAccessToken","_useState3","_useState4","loading","setLoading","_useState5","_useState6","isRefreshing","setIsRefreshing","useEffect","initializeAuth","_ref2","success","userPayload","useCallback","_callee2","_context2","_jsx","Provider","useAuth","context","useContext"],"mappings":"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"}