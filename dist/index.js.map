{"version":3,"file":"index.js","sources":["../src/JwtAuthClient.ts","../src/react/AuthContext.tsx"],"sourcesContent":["import { JwtAuthClientOptions, LoginCredentials, JwtPayload, TokenResponse } from './types';\n\n/**\n * @class JwtAuthClient\n * @description A client for handling JWT authentication.\n */\nexport class JwtAuthClient {\n    private storage: Storage;\n    private accessTokenKey: string;\n    private refreshTokenKey: string;\n    private rolesClaim: string;\n    private permissionsClaim: string;\n    private onRefresh: JwtAuthClientOptions['onRefresh'];\n    private onLogin: JwtAuthClientOptions['onLogin'];\n    private onVerify: JwtAuthClientOptions['onVerify'];\n    private loginApiConfig?: JwtAuthClientOptions['loginApiConfig'];\n    private refreshApiConfig?: JwtAuthClientOptions['refreshApiConfig'];\n    private verifyApiConfig?: JwtAuthClientOptions['verifyApiConfig'];\n\n    /**\n     * @constructor\n     * @param {JwtAuthClientOptions} [options] - The options for the client.\n     */\n    constructor(options: JwtAuthClientOptions = {}) {\n        this.storage = options.storage || window.localStorage;\n        this.accessTokenKey = options.accessTokenKey || 'jwt_access_token';\n        this.refreshTokenKey = options.refreshTokenKey || 'jwt_refresh_token';\n        this.rolesClaim = options.rolesClaim || 'roles';\n        this.permissionsClaim = options.permissionsClaim || 'permissions';\n        this.onRefresh = options.onRefresh;\n        this.onLogin = options.onLogin;\n        this.onVerify = options.onVerify;\n        this.loginApiConfig = options.loginApiConfig;\n        this.refreshApiConfig = options.refreshApiConfig;\n        this.verifyApiConfig = options.verifyApiConfig;\n    }\n\n    /**\n     * Saves the tokens to the configured storage.\n     * @param {string} accessToken - The access JWT string.\n     * @param {string} [refreshToken] - The optional refresh JWT string.\n     */\n    public setTokens(accessToken: string, refreshToken?: string): void {\n        if (typeof accessToken !== 'string' || accessToken.split('.').length !== 3) {\n            console.error('Invalid Access Token provided to setTokens method.');\n            return;\n        }\n        this.storage.setItem(this.accessTokenKey, accessToken);\n        if (refreshToken) {\n            this.storage.setItem(this.refreshTokenKey, refreshToken);\n        }\n    }\n\n    /**\n     * Handles the login process by calling the provided onLogin function or a default fetch.\n     * @param {object} credentials - User credentials (e.g., { username, password }).\n     * @param {string} [loginUrl] - The URL for the login API endpoint. Overrides the one provided in options.\n     * @returns {Promise<{ tokenResponse: TokenResponse, apiResponse: any } | null>} The token response data and the full API response if login was successful, null otherwise.\n     */\n    public async login(credentials: LoginCredentials, loginUrl?: string): Promise<{ tokenResponse: TokenResponse, apiResponse: any } | null> {\n        const finalLoginUrl = loginUrl || this.loginApiConfig?.url;\n\n        if (!this.onLogin && !finalLoginUrl) {\n            console.error('Neither onLogin function nor loginUrl/loginApiConfig provided. Cannot perform login.');\n            return null;\n        }\n\n        try {\n            let tokenData: TokenResponse;\n            let rawResponseData: any;\n\n            if (this.onLogin) {\n                tokenData = await this.onLogin(credentials);\n                // If onLogin is used, we don't have the raw API response unless the user provides it.\n                // For now, we'll just return the tokenData as the apiResponse.\n                rawResponseData = tokenData;\n            } else if (finalLoginUrl) {\n                const response = await fetch(finalLoginUrl, {\n                    method: this.loginApiConfig?.method || 'POST',\n                    headers: {\n                        'Content-Type': 'application/json',\n                        ...this.loginApiConfig?.headers,\n                    },\n                    body: JSON.stringify(credentials),\n                });\n\n                if (!response.ok) {\n                    throw new Error(`Login failed with status: ${response.status}`);\n                }\n                rawResponseData = await response.json();\n                const accessToken = this.getDeepValue(rawResponseData, this.loginApiConfig?.responseMapping?.accessToken);\n                const refreshToken = this.getDeepValue(rawResponseData, this.loginApiConfig?.responseMapping?.refreshToken);\n\n                if (!accessToken) {\n                    throw new Error('Login response did not contain an access token.');\n                }\n                tokenData = { accessToken, refreshToken };\n            } else {\n                throw new Error('Login function or URL/API config not configured.');\n            }\n\n            this.setTokens(tokenData.accessToken, tokenData.refreshToken);\n            return { tokenResponse: tokenData, apiResponse: rawResponseData };\n        } catch (error) {\n            console.error('Login failed:', error);\n            this.logout(); // Clear any existing tokens on login failure\n            return null;\n        }\n    }\n\n    /**\n     * Verifies the access token with the backend using the provided onVerify function or verifyApiConfig.\n     * @returns {Promise<boolean>} True if token is valid, false otherwise.\n     */\n    public async verifyToken(): Promise<boolean> {\n        const accessToken = this.getAccessToken();\n        if (!accessToken) {\n            return false;\n        }\n\n        if (this.onVerify) {\n            try {\n                const isValid = await this.onVerify(accessToken);\n                if (!isValid) {\n                    console.warn('Backend verification failed for access token.');\n                    this.logout(); // Invalidate local session if backend says token is invalid\n                }\n                return isValid;\n            } catch (error) {\n                console.error('Error during token verification:', error);\n                this.logout(); // Logout on verification error\n                return false;\n            }\n        } else if (this.verifyApiConfig) {\n            try {\n                const response = await fetch(this.verifyApiConfig.url, {\n                    method: this.verifyApiConfig.method || 'POST',\n                    headers: {\n                        'Authorization': `Bearer ${accessToken}`,\n                        ...this.verifyApiConfig.headers,\n                    },\n                });\n\n                const rawResponseData = await response.json();\n                const isValid = this.getDeepValue(rawResponseData, this.verifyApiConfig.responseMapping?.isValid);\n\n                if (!isValid) {\n                    console.warn('Backend verification failed for access token.');\n                    this.logout();\n                }\n                return isValid;\n            } catch (error) {\n                console.error('Error during token verification:', error);\n                this.logout();\n                return false;\n            }\n        } else {\n            console.warn('onVerify function or verifyApiConfig not configured. Assuming token is valid based on local expiration.');\n            return !this.isAccessTokenExpired();\n        }\n    }\n\n    /**\n     * Retrieves roles from the decoded access token payload.\n     * @returns {string[]} An array of roles or an empty array if not found.\n     */\n    public getRoles(): string[] {\n        const payload = this.getPayload();\n        if (payload && Array.isArray(payload[this.rolesClaim])) {\n            return payload[this.rolesClaim];\n        }\n        return [];\n    }\n\n    /**\n     * Checks if the user has a specific role.\n     * @param {string} role - The role to check for.\n     * @returns {boolean} True if the user has the role, false otherwise.\n     */\n    public hasRole(role: string): boolean {\n        return this.getRoles().includes(role);\n    }\n\n    /**\n     * Checks if the user has any of the specified roles.\n     * @param {string[]} roles - An array of roles to check for.\n     * @returns {boolean} True if the user has at least one of the roles, false otherwise.\n     */\n    public hasAnyRole(roles: string[]): boolean {\n        const userRoles = this.getRoles();\n        return roles.some(role => userRoles.includes(role));\n    }\n\n    /**\n     * Checks if the user has all of the specified roles.\n     * @param {string[]} roles - An array of roles to check for.\n     * @returns {boolean} True if the user has all of the roles, false otherwise.\n     */\n    public hasAllRoles(roles: string[]): boolean {\n        const userRoles = this.getRoles();\n        return roles.every(role => userRoles.includes(role));\n    }\n\n    /**\n     * Retrieves permissions from the decoded access token payload.\n     * @returns {string[]} An array of permissions or an empty array if not found.\n     */\n    public getPermissions(): string[] {\n        const payload = this.getPayload();\n        if (payload && Array.isArray(payload[this.permissionsClaim])) {\n            return payload[this.permissionsClaim] as string[];\n        }\n        return [];\n    }\n\n    /**\n     * Checks if the user has a specific permission.\n     * @param {string} permission - The permission to check for.\n     * @returns {boolean} True if the user has the permission, false otherwise.\n     */\n    public hasPermission(permission: string): boolean {\n        return this.getPermissions().includes(permission);\n    }\n\n    /**\n     * Checks if the user has any of the specified permissions.\n     * @param {string[]} permissions - An array of permissions to check for.\n     * @returns {boolean} True if the user has at least one of the permissions, false otherwise.\n     */\n    public hasAnyPermission(permissions: string[]): boolean {\n        const userPermissions = this.getPermissions();\n        return permissions.some((permission: string) => userPermissions.includes(permission));\n    }\n\n    /**\n     * Checks if the user has all of the specified permissions.\n     * @param {string[]} permissions - An array of permissions to check for.\n     * @returns {boolean} True if the user has all of the permissions, false otherwise.\n     */\n    public hasAllPermissions(permissions: string[]): boolean {\n        const userPermissions = this.getPermissions();\n        return permissions.every((permission: string) => userPermissions.includes(permission));\n    }\n\n    /**\n     * Removes tokens from storage.\n     */\n    public logout(): void {\n        this.storage.removeItem(this.accessTokenKey);\n        this.storage.removeItem(this.refreshTokenKey);\n    }\n\n    /**\n     * Retrieves the raw access token from storage.\n     * @returns {string|null} The access token string or null if not found.\n     */\n    public getAccessToken(): string | null {\n        return this.storage.getItem(this.accessTokenKey);\n    }\n\n    /**\n     * Retrieves the raw refresh token from storage.\n     * @returns {string|null} The refresh token string or null if not found.\n     */\n    public getRefreshToken(): string | null {\n        return this.storage.getItem(this.refreshTokenKey);\n    }\n\n    /**\n     * Decodes the access token payload.\n     * @returns {object|null} The decoded payload object or null if token is invalid/missing.\n     */\n    public getPayload(): JwtPayload | null {\n        const token = this.getAccessToken();\n        if (!token) return null;\n\n        try {\n            const payloadBase64 = token.split('.')[1];\n            const decodedJson = atob(payloadBase64.replace(/-/g, '+').replace(/_/g, '/'));\n            return JSON.parse(decodedJson);\n        } catch (error) {\n            console.error('Failed to decode JWT payload:', error);\n            return null;\n        }\n    }\n\n    /**\n     * Checks if the access token is expired.\n     * @returns {boolean} True if the token is expired or doesn't exist.\n     */\n    public isAccessTokenExpired(): boolean {\n        const payload = this.getPayload();\n        if (!payload || typeof payload.exp !== 'number') {\n            return true;\n        }\n        const nowInSeconds = Math.floor(Date.now() / 1000);\n        return nowInSeconds > payload.exp;\n    }\n\n    /**\n     * Checks if a valid, non-expired access token exists.\n     * @returns {boolean} True if authenticated, false otherwise.\n     */\n    public isAuthenticated(): boolean {\n        return !this.isAccessTokenExpired();\n    }\n\n    /**\n     * Attempts to refresh the access token using the stored refresh token or refreshApiConfig.\n     * @returns {Promise<boolean>} True if refresh was successful, false otherwise.\n     */\n    public async refreshAccessToken(): Promise<boolean> {\n        const refreshToken = this.getRefreshToken();\n        if (!refreshToken) {\n            console.log('No refresh token available.');\n            return false;\n        }\n\n        if (this.onRefresh) {\n            try {\n                const { newAccessToken, newRefreshToken } = await this.onRefresh(refreshToken);\n                if (!newAccessToken) {\n                    throw new Error(\"Refresh call did not return a new access token.\");\n                }\n                this.setTokens(newAccessToken, newRefreshToken); // Store new tokens\n                return true;\n            } catch (error: any) {\n                console.error('Failed to refresh token:', error);\n                this.logout();\n                return false;\n            }\n        } else if (this.refreshApiConfig) {\n            try {\n                const response = await fetch(this.refreshApiConfig.url, {\n                    method: this.refreshApiConfig.method || 'POST',\n                    headers: {\n                        'Content-Type': 'application/json',\n                        ...this.refreshApiConfig.headers,\n                    },\n                    body: JSON.stringify({ refreshToken }),\n                });\n\n                if (!response.ok) {\n                    throw new Error(`Refresh failed with status: ${response.status}`);\n                }\n\n                const responseData = await response.json();\n                const newAccessToken = this.getDeepValue(responseData, this.refreshApiConfig.responseMapping?.newAccessToken);\n                const newRefreshToken = this.getDeepValue(responseData, this.refreshApiConfig.responseMapping?.newRefreshToken);\n\n                if (!newAccessToken) {\n                    throw new Error(\"Refresh call did not return a new access token.\");\n                }\n                this.setTokens(newAccessToken, newRefreshToken); // Store new tokens\n                return true;\n            } catch (error) {\n                console.error('Failed to refresh token:', error);\n                this.logout();\n                return false;\n            }\n        } else {\n            console.error('onRefresh function or refreshApiConfig not configured. Cannot refresh token.');\n            return false;\n        }\n    }\n\n    /**\n     * Safely extracts a value from an object using a dot-notation path.\n     * @param obj The object to extract from.\n     * @param path The dot-notation path (e.g., 'data.user.id').\n     * @returns The extracted value or undefined if not found.\n     */\n    private getDeepValue(obj: any, path?: string): any {\n        if (!path || !obj) return undefined;\n        return path.split('.').reduce((acc, part) => acc && acc[part], obj);\n    }\n}","import React, { createContext, useState, useEffect, useMemo, useCallback, useContext } from 'react';\nimport { JwtAuthClient } from '../JwtAuthClient';\nimport { AuthContextType, JwtAuthClientOptions, LoginCredentials, JwtPayload } from '../types';\n\nconst AuthContext = createContext<AuthContextType | null>(null);\n\nexport function AuthProvider({ children, config }: { children: React.ReactNode; config: JwtAuthClientOptions }) {\n    const authClient = useMemo(() => new JwtAuthClient(config), [config]);\n\n    const [accessToken, setAccessToken] = useState(authClient.getAccessToken());\n    const [loading, setLoading] = useState(true);\n    const [isRefreshing, setIsRefreshing] = useState(false);\n    const [isVerified, setIsVerified] = useState(false);\n\n    // Initial check on component mount\n    useEffect(() => {\n        const initializeAuth = async () => {\n            let verified = false;\n            if (authClient.isAccessTokenExpired()) {\n                const refreshToken = authClient.getRefreshToken();\n                if (refreshToken) {\n                    setIsRefreshing(true);\n                    const success = await authClient.refreshAccessToken();\n                    if (success) {\n                        setAccessToken(authClient.getAccessToken());\n                        verified = await authClient.verifyToken();\n                    }\n                }\n            } else {\n                verified = await authClient.verifyToken();\n            }\n            setIsVerified(verified);\n            setLoading(false);\n            setIsRefreshing(false);\n        };\n        initializeAuth();\n    }, [authClient]);\n\n    const isAuthenticated = useMemo(() => !!accessToken && !authClient.isAccessTokenExpired() && isVerified, [accessToken, authClient, isVerified]);\n    const userPayload = useMemo(() => isAuthenticated ? authClient.getPayload() : null, [isAuthenticated, authClient]);\n\n    const login = useCallback(async (credentials: LoginCredentials, loginUrl?: string) => {\n        setLoading(true);\n        const result = await authClient.login(credentials, loginUrl);\n        if (result) {\n            setAccessToken(authClient.getAccessToken());\n            const verified = await authClient.verifyToken();\n            setIsVerified(verified);\n        } else {\n            setAccessToken(null);\n            setIsVerified(false);\n        }\n        setLoading(false);\n        return result;\n    }, [authClient]);\n\n    const logout = useCallback(() => {\n        authClient.logout();\n        setAccessToken(null);\n    }, [authClient]);\n\n    const refreshAccessToken = useCallback(async () => {\n        setIsRefreshing(true);\n        const success = await authClient.refreshAccessToken();\n        if (success) {\n            setAccessToken(authClient.getAccessToken());\n        }\n        setIsRefreshing(false);\n        return success;\n    }, [authClient]);\n\n    const verifyToken = useCallback(async () => {\n        setLoading(true);\n        const verified = await authClient.verifyToken();\n        setIsVerified(verified);\n        setLoading(false);\n        return verified;\n    }, [authClient]);\n\n    const value = useMemo(() => ({\n        isAuthenticated,\n        userPayload,\n        accessToken,\n        login,\n        logout,\n        loading,\n        isRefreshing,\n        refreshAccessToken,\n        verifyToken,\n        getRoles: () => authClient.getRoles(),\n        hasRole: (role) => authClient.hasRole(role),\n        hasAnyRole: (roles) => authClient.hasAnyRole(roles),\n        hasAllRoles: (roles) => authClient.hasAllRoles(roles),\n        getPermissions: () => authClient.getPermissions(),\n        hasPermission: (permission: string) => authClient.hasPermission(permission),\n        hasAnyPermission: (permissions: string[]) => authClient.hasAnyPermission(permissions),\n        hasAllPermissions: (permissions: string[]) => authClient.hasAllPermissions(permissions),\n    }), [isAuthenticated, userPayload, accessToken, login, logout, loading, isRefreshing, refreshAccessToken, verifyToken, authClient]);\n\n    return (\n        <AuthContext.Provider value={value}>\n            {children}\n        </AuthContext.Provider>\n    );\n}\n\nexport function useAuth(): AuthContextType {\n    const context = useContext(AuthContext);\n    if (context === null) {\n        throw new Error('useAuth must be used within an AuthProvider');\n    }\n    return context;\n}"],"names":["JwtAuthClient","options","_classCallCheck","storage","window","localStorage","accessTokenKey","refreshTokenKey","rolesClaim","permissionsClaim","onRefresh","onLogin","onVerify","loginApiConfig","refreshApiConfig","verifyApiConfig","_createClass","key","value","setTokens","accessToken","refreshToken","split","length","console","error","setItem","_login","_asyncToGenerator","_regenerator","m","_callee","credentials","loginUrl","_a","_b","_c","_d","_e","_f","_g","finalLoginUrl","tokenData","rawResponseData","response","_t","w","_context","n","url","a","p","v","fetch","method","headers","_objectSpread","body","JSON","stringify","ok","Error","concat","status","json","getDeepValue","responseMapping","tokenResponse","apiResponse","logout","login","_x","_x2","apply","arguments","_verifyToken","_callee2","isValid","_isValid","_t2","_t3","_context2","getAccessToken","warn","isAccessTokenExpired","verifyToken","getRoles","payload","getPayload","Array","isArray","hasRole","role","includes","hasAnyRole","roles","userRoles","some","hasAllRoles","every","getPermissions","hasPermission","permission","hasAnyPermission","permissions","userPermissions","hasAllPermissions","removeItem","getItem","getRefreshToken","token","payloadBase64","decodedJson","atob","replace","parse","exp","nowInSeconds","Math","floor","Date","now","isAuthenticated","_refreshAccessToken","_callee3","_yield$this$onRefresh","newAccessToken","newRefreshToken","responseData","_newAccessToken","_newRefreshToken","_t4","_t5","_context3","log","refreshAccessToken","obj","path","undefined","reduce","acc","part","AuthContext","createContext","AuthProvider","_ref","children","config","authClient","useMemo","_useState","useState","_useState2","_slicedToArray","setAccessToken","_useState3","_useState4","loading","setLoading","_useState5","_useState6","isRefreshing","setIsRefreshing","_useState7","_useState8","isVerified","setIsVerified","useEffect","initializeAuth","_ref2","verified","success","userPayload","useCallback","_ref3","result","_callee4","_context4","React","createElement","Provider","useAuth","context","useContext"],"mappings":"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"}