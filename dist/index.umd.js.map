{"version":3,"file":"index.umd.js","sources":["../src/JwtAuthClient.ts","../src/react/AuthContext.tsx"],"sourcesContent":["import { JwtAuthClientOptions, LoginCredentials, JwtPayload, TokenResponse } from './types';\n\n/**\n * @class JwtAuthClient\n * @description A client for handling JWT authentication.\n */\nexport class JwtAuthClient {\n    private storage: Storage;\n    private accessTokenKey: string;\n    private refreshTokenKey: string;\n    private rolesClaim: string;\n    private permissionsClaim: string;\n    private onRefresh: JwtAuthClientOptions['onRefresh'];\n    private onLogin: JwtAuthClientOptions['onLogin'];\n    private onVerify: JwtAuthClientOptions['onVerify'];\n\n    /**\n     * @constructor\n     * @param {JwtAuthClientOptions} [options] - The options for the client.\n     */\n    constructor(options: JwtAuthClientOptions = {}) {\n        this.storage = options.storage || window.localStorage;\n        this.accessTokenKey = options.accessTokenKey || 'jwt_access_token';\n        this.refreshTokenKey = options.refreshTokenKey || 'jwt_refresh_token';\n        this.rolesClaim = options.rolesClaim || 'roles';\n        this.permissionsClaim = options.permissionsClaim || 'permissions';\n        this.onRefresh = options.onRefresh;\n        this.onLogin = options.onLogin;\n        this.onVerify = options.onVerify;\n    }\n\n    /**\n     * Saves the tokens to the configured storage.\n     * @param {string} accessToken - The access JWT string.\n     * @param {string} [refreshToken] - The optional refresh JWT string.\n     */\n    setTokens(accessToken: string, refreshToken?: string) {\n        if (typeof accessToken !== 'string' || accessToken.split('.').length !== 3) {\n            console.error('Invalid Access Token provided to setTokens method.');\n            return;\n        }\n        this.storage.setItem(this.accessTokenKey, accessToken);\n        if (refreshToken) {\n            this.storage.setItem(this.refreshTokenKey, refreshToken);\n        }\n    }\n\n    /**\n     * Handles the login process by calling the provided onLogin function or a default fetch.\n     * @param {object} credentials - User credentials (e.g., { username, password }).\n     * @param {string} loginUrl - The URL for the login API endpoint.\n     * @returns {Promise<boolean>} True if login was successful, false otherwise.\n     */\n    async login(credentials: LoginCredentials, loginUrl?: string): Promise<boolean> {\n        if (!this.onLogin && !loginUrl) {\n            console.error('Neither onLogin function nor loginUrl provided. Cannot perform login.');\n            return false;\n        }\n\n        try {\n            let responseData;\n            if (this.onLogin) {\n                responseData = await this.onLogin(credentials);\n            } else {\n                if (!loginUrl) {\n                    throw new Error('loginUrl must be provided if onLogin function is not configured.');\n                }\n                const response = await fetch(loginUrl, {\n                    method: 'POST',\n                    headers: {\n                        'Content-Type': 'application/json',\n                    },\n                    body: JSON.stringify(credentials),\n                });\n\n                if (!response.ok) {\n                    throw new Error(`Login failed with status: ${response.status}`);\n                }\n                responseData = await response.json();\n            }\n\n            const { accessToken, refreshToken } = responseData;\n            if (!accessToken) {\n                throw new Error('Login response did not contain an access token.');\n            }\n\n            this.setTokens(accessToken, refreshToken);\n            return true;\n        } catch (error) {\n            console.error('Login failed:', error);\n            this.logout(); // Clear any existing tokens on login failure\n            return false;\n        }\n    }\n\n    /**\n     * Verifies the access token with the backend using the provided onVerify function.\n     * @returns {Promise<boolean>} True if token is valid, false otherwise.\n     */\n    async verifyToken(): Promise<boolean> {\n        if (!this.onVerify || typeof this.onVerify !== 'function') {\n            console.warn('onVerify function not configured. Cannot verify token with backend.');\n            return true; // Assume valid if no verification function is provided\n        }\n\n        const accessToken = this.getAccessToken();\n        if (!accessToken) {\n            return false;\n        }\n\n        try {\n            const isValid = await this.onVerify(accessToken);\n            if (!isValid) {\n                console.warn('Backend verification failed for access token.');\n                this.logout(); // Invalidate local session if backend says token is invalid\n            }\n            return isValid;\n        } catch (error) {\n            console.error('Error during token verification:', error);\n            this.logout(); // Logout on verification error\n            return false;\n        }\n    }\n\n    /**\n     * Retrieves roles from the decoded access token payload.\n     * @returns {string[]} An array of roles or an empty array if not found.\n     */\n    getRoles() {\n        const payload = this.getPayload();\n        if (payload && Array.isArray(payload[this.rolesClaim])) {\n            return payload[this.rolesClaim];\n        }\n        return [];\n    }\n\n    /**\n     * Checks if the user has a specific role.\n     * @param {string} role - The role to check for.\n     * @returns {boolean} True if the user has the role, false otherwise.\n     */\n    hasRole(role: string) {\n        return this.getRoles().includes(role);\n    }\n\n    /**\n     * Checks if the user has any of the specified roles.\n     * @param {string[]} roles - An array of roles to check for.\n     * @returns {boolean} True if the user has at least one of the roles, false otherwise.\n     */\n    hasAnyRole(roles: string[]) {\n        const userRoles = this.getRoles();\n        return roles.some(role => userRoles.includes(role));\n    }\n\n    /**\n     * Checks if the user has all of the specified roles.\n     * @param {string[]} roles - An array of roles to check for.\n     * @returns {boolean} True if the user has all of the roles, false otherwise.\n     */\n    hasAllRoles(roles: string[]) {\n        const userRoles = this.getRoles();\n        return roles.every(role => userRoles.includes(role));\n    }\n\n    /**\n     * Retrieves permissions from the decoded access token payload.\n     * @returns {string[]} An array of permissions or an empty array if not found.\n     */\n    getPermissions(): string[] {\n        const payload = this.getPayload();\n        if (payload && Array.isArray(payload[this.permissionsClaim])) {\n            return payload[this.permissionsClaim] as string[];\n        }\n        return [];\n    }\n\n    /**\n     * Checks if the user has a specific permission.\n     * @param {string} permission - The permission to check for.\n     * @returns {boolean} True if the user has the permission, false otherwise.\n     */\n    hasPermission(permission: string): boolean {\n        return this.getPermissions().includes(permission);\n    }\n\n    /**\n     * Checks if the user has any of the specified permissions.\n     * @param {string[]} permissions - An array of permissions to check for.\n     * @returns {boolean} True if the user has at least one of the permissions, false otherwise.\n     */\n    hasAnyPermission(permissions: string[]): boolean {\n        const userPermissions = this.getPermissions();\n        return permissions.some((permission: string) => userPermissions.includes(permission));\n    }\n\n    /**\n     * Checks if the user has all of the specified permissions.\n     * @param {string[]} permissions - An array of permissions to check for.\n     * @returns {boolean} True if the user has all of the permissions, false otherwise.\n     */\n    hasAllPermissions(permissions: string[]): boolean {\n        const userPermissions = this.getPermissions();\n        return permissions.every((permission: string) => userPermissions.includes(permission));\n    }\n\n    /**\n     * Removes tokens from storage.\n     */\n    logout() {\n        this.storage.removeItem(this.accessTokenKey);\n        this.storage.removeItem(this.refreshTokenKey);\n    }\n\n    /**\n     * Retrieves the raw access token from storage.\n     * @returns {string|null} The access token string or null if not found.\n     */\n    getAccessToken() {\n        return this.storage.getItem(this.accessTokenKey);\n    }\n\n    /**\n     * Retrieves the raw refresh token from storage.\n     * @returns {string|null} The refresh token string or null if not found.\n     */\n    getRefreshToken() {\n        return this.storage.getItem(this.refreshTokenKey);\n    }\n\n    /**\n     * Decodes the access token payload.\n     * @returns {object|null} The decoded payload object or null if token is invalid/missing.\n     */\n    getPayload() {\n        const token = this.getAccessToken();\n        if (!token) return null;\n\n        try {\n            const payloadBase64 = token.split('.')[1];\n            const decodedJson = atob(payloadBase64.replace(/-/g, '+').replace(/_/g, '/'));\n            return JSON.parse(decodedJson);\n        } catch (error) {\n            console.error('Failed to decode JWT payload:', error);\n            return null;\n        }\n    }\n\n    /**\n     * Checks if the access token is expired.\n     * @returns {boolean} True if the token is expired or doesn't exist.\n     */\n    isAccessTokenExpired() {\n        const payload = this.getPayload();\n        if (!payload || typeof payload.exp !== 'number') {\n            return true;\n        }\n        const nowInSeconds = Math.floor(Date.now() / 1000);\n        return nowInSeconds > payload.exp;\n    }\n\n    /**\n     * Checks if a valid, non-expired access token exists.\n     * @returns {boolean} True if authenticated, false otherwise.\n     */\n    isAuthenticated(): boolean {\n        return !this.isAccessTokenExpired();\n    }\n\n    /**\n     * Attempts to refresh the access token using the stored refresh token.\n     * @returns {Promise<boolean>} True if refresh was successful, false otherwise.\n     */\n    async refreshAccessToken(): Promise<boolean> {\n        if (!this.onRefresh || typeof this.onRefresh !== 'function') {\n            console.error('onRefresh function not configured. Cannot refresh token.');\n            return false;\n        }\n\n        const refreshToken = this.getRefreshToken();\n        if (!refreshToken) {\n            console.log('No refresh token available.');\n            return false;\n        }\n\n        try {\n            const { newAccessToken, newRefreshToken } = await this.onRefresh(refreshToken);\n            if (!newAccessToken) {\n                throw new Error(\"Refresh call did not return a new access token.\");\n            }\n            this.setTokens(newAccessToken, newRefreshToken); // Store new tokens\n            return true;\n        } catch (error: any) {\n            console.error('Failed to refresh token:', error);\n            // If refresh fails (e.g., refresh token is also expired), log the user out.\n            this.logout();\n            return false;\n        }\n    }\n}","import React, { createContext, useState, useEffect, useMemo, useCallback, useContext } from 'react';\nimport { JwtAuthClient } from '../JwtAuthClient';\nimport { AuthContextType, JwtAuthClientOptions, LoginCredentials, JwtPayload } from '../types';\n\nconst AuthContext = createContext<AuthContextType | null>(null);\n\nexport function AuthProvider({ children, config }: { children: React.ReactNode; config: JwtAuthClientOptions }) {\n    const authClient = useMemo(() => new JwtAuthClient(config), [config]);\n\n    const [accessToken, setAccessToken] = useState(authClient.getAccessToken());\n    const [loading, setLoading] = useState(true);\n    const [isRefreshing, setIsRefreshing] = useState(false);\n    const [isVerified, setIsVerified] = useState(false);\n\n    // Initial check on component mount\n    useEffect(() => {\n        const initializeAuth = async () => {\n            let verified = false;\n            if (authClient.isAccessTokenExpired()) {\n                const refreshToken = authClient.getRefreshToken();\n                if (refreshToken) {\n                    setIsRefreshing(true);\n                    const success = await authClient.refreshAccessToken();\n                    if (success) {\n                        setAccessToken(authClient.getAccessToken());\n                        verified = await authClient.verifyToken();\n                    }\n                }\n            } else {\n                verified = await authClient.verifyToken();\n            }\n            setIsVerified(verified);\n            setLoading(false);\n            setIsRefreshing(false);\n        };\n        initializeAuth();\n    }, [authClient]);\n\n    const isAuthenticated = useMemo(() => !!accessToken && !authClient.isAccessTokenExpired() && isVerified, [accessToken, authClient, isVerified]);\n    const userPayload = useMemo(() => isAuthenticated ? authClient.getPayload() : null, [isAuthenticated, authClient]);\n\n    const login = useCallback(async (credentials: LoginCredentials, loginUrl?: string) => {\n        setLoading(true);\n        const success = await authClient.login(credentials, loginUrl);\n        if (success) {\n            setAccessToken(authClient.getAccessToken());\n            const verified = await authClient.verifyToken();\n            setIsVerified(verified);\n        } else {\n            setAccessToken(null);\n            setIsVerified(false);\n        }\n        setLoading(false);\n        return success;\n    }, [authClient]);\n\n    const logout = useCallback(() => {\n        authClient.logout();\n        setAccessToken(null);\n    }, [authClient]);\n\n    const refreshAccessToken = useCallback(async () => {\n        setIsRefreshing(true);\n        const success = await authClient.refreshAccessToken();\n        if (success) {\n            setAccessToken(authClient.getAccessToken());\n        }\n        setIsRefreshing(false);\n        return success;\n    }, [authClient]);\n\n    const verifyToken = useCallback(async () => {\n        setLoading(true);\n        const verified = await authClient.verifyToken();\n        setIsVerified(verified);\n        setLoading(false);\n        return verified;\n    }, [authClient]);\n\n    const value = useMemo(() => ({\n        isAuthenticated,\n        userPayload,\n        accessToken,\n        login,\n        logout,\n        loading,\n        isRefreshing,\n        refreshAccessToken,\n        verifyToken,\n        getRoles: () => authClient.getRoles(),\n        hasRole: (role) => authClient.hasRole(role),\n        hasAnyRole: (roles) => authClient.hasAnyRole(roles),\n        hasAllRoles: (roles) => authClient.hasAllRoles(roles),\n        getPermissions: () => authClient.getPermissions(),\n        hasPermission: (permission: string) => authClient.hasPermission(permission),\n        hasAnyPermission: (permissions: string[]) => authClient.hasAnyPermission(permissions),\n        hasAllPermissions: (permissions: string[]) => authClient.hasAllPermissions(permissions),\n    }), [isAuthenticated, userPayload, accessToken, login, logout, loading, isRefreshing, refreshAccessToken, verifyToken, authClient]);\n\n    return (\n        <AuthContext.Provider value={value}>\n            {children}\n        </AuthContext.Provider>\n    );\n}\n\nexport function useAuth(): AuthContextType {\n    const context = useContext(AuthContext);\n    if (context === null) {\n        throw new Error('useAuth must be used within an AuthProvider');\n    }\n    return context;\n}"],"names":["JwtAuthClient","options","_classCallCheck","storage","window","localStorage","accessTokenKey","refreshTokenKey","rolesClaim","permissionsClaim","onRefresh","onLogin","onVerify","_createClass","key","value","setTokens","accessToken","refreshToken","split","length","console","error","setItem","_login","_asyncToGenerator","_regenerator","m","_callee","credentials","loginUrl","responseData","response","_responseData","_t","w","_context","n","a","p","v","Error","fetch","method","headers","body","JSON","stringify","ok","concat","status","json","logout","login","_x","_x2","apply","arguments","_verifyToken","_callee2","isValid","_t2","_context2","warn","getAccessToken","verifyToken","getRoles","payload","getPayload","Array","isArray","hasRole","role","includes","hasAnyRole","roles","userRoles","some","hasAllRoles","every","getPermissions","hasPermission","permission","hasAnyPermission","permissions","userPermissions","hasAllPermissions","removeItem","getItem","getRefreshToken","token","payloadBase64","decodedJson","atob","replace","parse","isAccessTokenExpired","exp","nowInSeconds","Math","floor","Date","now","isAuthenticated","_refreshAccessToken","_callee3","_yield$this$onRefresh","newAccessToken","newRefreshToken","_t3","_context3","log","refreshAccessToken","AuthContext","createContext","AuthProvider","_ref","children","config","authClient","useMemo","_useState","useState","_useState2","_slicedToArray","setAccessToken","_useState3","_useState4","loading","setLoading","_useState5","_useState6","isRefreshing","setIsRefreshing","_useState7","_useState8","isVerified","setIsVerified","useEffect","initializeAuth","_ref2","verified","success","userPayload","useCallback","_ref3","_callee4","_context4","React","createElement","Provider","useAuth","context","useContext"],"mappings":"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"}